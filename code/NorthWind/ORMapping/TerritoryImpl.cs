//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.2.7.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Reflection;
using Storm.Lib;
using Storm.Attributes;
using NorthWind;

namespace NorthWind
{

	[DomainObjectImpl]
	public class TerritoryImpl : Territory
	{
#region Factory Implementation
			public class FactoryImpl : IFactory
			{
			
			public DomainObject create()
			{
				return new TerritoryImpl();
			}
			
			public DomainObject createFromParameters(
				Key id,
				Timestamp timestamp,
				params DictionaryEntry[] parameters)
			{
				return new TerritoryImpl(id, timestamp, parameters);
			}
		}
#endregion

#region Finder Implementation
		public class FinderImpl : IFinder
		{
			public DomainObject findById(Key id)
			{
				return Registry.Instance.getMapper(typeof(Territory)).findById(id);
			}
			public IList find(QueryObject qo)
			{
				return Registry.Instance.getMapper(typeof(Territory)).find(qo);
			}
			public IList findAll()
			{
				return Registry.Instance.getMapper(typeof(Territory)).findAll();
			}
		}
#endregion

#region Static Attributes
		private static FactoryImpl m_FactoryImpl = new FactoryImpl();
		private static FinderImpl m_FinderImpl = new FinderImpl();
#endregion
		
#region Member Variables
		private object m_TerritoryId = null;
		private object m_TerritoryDescription = null;
		private ToOneRelation m_Region = null;
		private ToManyRelation m_EmployeeTerritories = null;
#endregion

#region Constructors
		public TerritoryImpl()
		{
			markNew();
			m_Region = new ToOneRelation(typeof(Region), "RegionID", null);
		}
		

		internal TerritoryImpl(
			Key id, 
			Timestamp timestamp, 
			params DictionaryEntry[] parameters)
		{ 
			markClean();
			m_id = id;
			m_timestamp = timestamp;
			FieldInfo fInfo;
			Type thisType = this.GetType();
			Type domainObjectType = typeof(Territory);
			
			IEnumerator enumerator = parameters.GetEnumerator();

			while(enumerator.MoveNext())
			{
				if(((DictionaryEntry)enumerator.Current).Value != null)
				{
					if(((DictionaryEntry)enumerator.Current).Value.GetType() == typeof(ToOneRelation))
					{ 
						if((String)((DictionaryEntry)enumerator.Current).Key == "Region")
						{ 
							m_Region = (ToOneRelation)((DictionaryEntry)enumerator.Current).Value;
							continue;
						}
					} 
					if(((DictionaryEntry)enumerator.Current).Value.GetType() == typeof(ToManyRelation))
					{ 
						if((String)((DictionaryEntry)enumerator.Current).Key == "EmployeeTerritories")
						{ 
							m_EmployeeTerritories = (ToManyRelation)((DictionaryEntry)enumerator.Current).Value;
							continue;
						}
					}
				} 
				if(this.GetType().GetProperty((String)((DictionaryEntry)enumerator.Current).Key) != null)
				{
					string variable = "m_" + (String)((DictionaryEntry)enumerator.Current).Key;
					if((fInfo = thisType.GetField(variable, BindingFlags.DeclaredOnly|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance)) != null)
					{
							fInfo.SetValue(this, ((DictionaryEntry)enumerator.Current).Value);
					}
				}
			}
		}
#endregion

#region Methods
		public override void addTerritory(EmployeeTerritory et)
		{
			if(et != null)
			{
				et.Territory = this;
				m_EmployeeTerritories.Add(et);
				this.markDirty();
			}
			else
			{
				throw new ApplicationException();
			}
		}
		
		public override void delete()
		{
			foreach(EmployeeTerritory employeeterritory in EmployeeTerritories)
			{
				employeeterritory.delete();
			}
			
			this.markRemoved();
		}
#endregion

#region Properties
		public override String TerritoryId 
		{
			get
			{
				if(m_id == null)
					return String.Empty;			
				return (String)m_id[0];
			}
			set
			{
				if(m_id == null)
					m_id = new Key(new object[] {value});
				else
					m_id[0] = value;
				m_TerritoryId = value;
				markDirty();
			}
		}
		public override String TerritoryDescription 
		{
			get
			{
				if(m_TerritoryDescription == null)
					return String.Empty;			
				return (String)m_TerritoryDescription;
			}
			set
			{
				m_TerritoryDescription = value;
				markDirty();
			}
		}
		public override Region Region 
		{
			get
			{
				return (Region)m_Region.Object;
			}
			set
			{
				m_Region.Object = value;
			}
		}
		public override IList EmployeeTerritories 
		{
			get
			{
				return (IList)m_EmployeeTerritories;
			}
		}
				
		public static FactoryImpl Factory
		{
			get
			{
				return m_FactoryImpl;
			}
		}
		
		public static FinderImpl Finder
		{
			get
			{
				return m_FinderImpl;
			}
		}
		
		public override bool isNull(string propertyName)
		{
			switch(propertyName)
			{
				case "TerritoryDescription":
					if(m_TerritoryDescription == null) return true;
					break;
				case "Region":
					if(m_Region.Object == null) return true;
					break;
				default:
					break;
			}
			return false;
		}
#endregion
	}

}
