//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.2.7.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Reflection;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using Storm.Lib;
using Storm.Attributes;
using NorthWind;

namespace NorthWind
{


	[MapperImpl(typeof(Region))]
	public class RegionMapper : IMapper
	{		
#region Finder Methods
		public DomainObject findById(Key id)
		{
			try
			{
				SqlDataReader reader = null;
				SqlConnection connection = UnitOfWork.Instance.Connection;

				connection.Open();

				string sqlStmt = 
					"SELECT * from Region WHERE RegionID = @RegionId";
				SqlCommand command = new SqlCommand(sqlStmt, connection);
				command.Parameters.Add("@RegionId", id[0]);

				reader = command.ExecuteReader();
				Region region = null;
				if(reader.Read())
				{
					region = loadFields(reader);
				} 
				if(reader != null)
					reader.Close();
				connection.Close();

				return region;
			}
			catch(SqlException sqle)
			{
				throw new ApplicationException(sqle.Message);
			}
			catch(Exception e)
			{
				throw new ApplicationException(e.Message);
			}
		}		

		public IList findAll()
		{
			try
			{
				ArrayList array = new ArrayList();
				SqlDataReader reader = null;
				SqlConnection connection = UnitOfWork.Instance.Connection;

				connection.Open();

				string sqlStmt = 
					"SELECT * from Region";
				SqlCommand command = new SqlCommand(sqlStmt, connection);

				reader = command.ExecuteReader();
				while(reader.Read())
				{
					array.Add(loadFields(reader));
				} 
				if(reader != null)
					reader.Close();
				connection.Close();

				return array;
			}
			catch(SqlException sqle)
			{
				throw new ApplicationException(sqle.Message);
			}
			catch(Exception e)
			{
				throw new ApplicationException(e.Message);
			}
		}		

		public IList find(QueryObject qo)
		{
			try
			{
				ArrayList array = new ArrayList();
				SqlDataReader reader = null;
				SqlConnection connection = UnitOfWork.Instance.Connection;

				connection.Open();

				string sqlStmt = 
					"SELECT * from Region WHERE " + qo.ToString();
				SqlCommand command = new SqlCommand(sqlStmt, connection);

				reader = command.ExecuteReader();
				while(reader.Read())
				{
					array.Add(loadFields(reader));
				} 
				if(reader != null)
					reader.Close();
				connection.Close();

				return array;
			}
			catch(SqlException sqle)
			{
				throw new ApplicationException(sqle.Message);
			}
			catch(Exception e)
			{
				throw new ApplicationException(e.Message);
			}
		}		
#endregion		
		
#region IMapper Members
		public void insert(DomainObject subject, SqlConnection connection, SqlTransaction transaction)
		{
			try
			{
				Region region = (Region)subject;
				SqlCommand command = new SqlCommand(
					"INSERT INTO Region (RegionDescription) VALUES (@Description) ; SELECT RegionID, VersionId FROM Region WHERE RegionID = SCOPE_IDENTITY()",
					connection, transaction);

				if(subject.isNull("Description"))
				{
					command.Parameters.Add("@Description", DBNull.Value );
				}
				else
				{
					command.Parameters.Add("@Description", region.Description);
				}
				SqlDataReader reader = command.ExecuteReader();
				if(reader.Read())
				{
					region.Id = new Key(new object[] {
						safeGetInt32(reader, "RegionID")});
					region.Timestamp = safeGetTimestamp(reader);
					subject.FireIdChanged();
					reader.Close();			
				}
				else
				{
					reader.Close();
					throw new ConcurrencyException();
				}
			}
			catch(SqlException sqle)
			{
				throw new ApplicationException(sqle.Message);
			}
			catch(Exception e)
			{
				throw new ApplicationException(e.Message);
			}
		}
		
		public void update(DomainObject subject, SqlConnection connection, SqlTransaction transaction)
		{
			try
			{
				Region region = (Region)subject;
				SqlCommand command = new SqlCommand(
					"UPDATE Region SET RegionDescription = @Description WHERE RegionID = @RegionId AND VersionId = @VersionId IF @@ROWCOUNT > 0  BEGIN SELECT VersionId FROM Region WHERE RegionID = @RegionId END",
					connection, transaction); 

				command.Parameters.Add("@VersionId", region.Timestamp.Value);
				if(subject.isNull("RegionId"))
				{
					command.Parameters.Add("@RegionId", DBNull.Value );
				}
				else
				{
					command.Parameters.Add("@RegionId", region.RegionId);
				}
				if(subject.isNull("Description"))
				{
					command.Parameters.Add("@Description", DBNull.Value );
				}
				else
				{
					command.Parameters.Add("@Description", region.Description);
				}

				SqlDataReader reader = command.ExecuteReader();
				if(reader.Read())
				{
					region.Timestamp = safeGetTimestamp(reader);
					reader.Close();
				}
				else
				{
					reader.Close();
					throw new ConcurrencyException();
				}
				subject.FireIdChanged();

			}
			catch(SqlException sqle)
			{
				throw new ApplicationException(sqle.Message);
			}
			catch(Exception e)
			{
				throw new ApplicationException(e.Message);
			}
		}
		
		public void delete(DomainObject subject, SqlConnection connection, SqlTransaction transaction)
		{
			try
			{
				Region region = (Region)subject;
				
				SqlCommand command = new SqlCommand(
					"DELETE FROM Region WHERE RegionID = @RegionId AND VersionId = @VersionId",
					connection, transaction);

				command.Parameters.Add("@VersionId", region.Timestamp.Value);
				if(subject.isNull("RegionId"))
				{
					command.Parameters.Add("@RegionId", DBNull.Value );
				}
				else
				{
					command.Parameters.Add("@RegionId", region.RegionId);
				}
				if(command.ExecuteNonQuery() <= 0)
				{
					throw new ConcurrencyException();
				}
			}
			catch(SqlException sqle)
			{
				throw new ApplicationException(sqle.Message);
			}
			catch(Exception e)
			{
				throw new ApplicationException(e.Message);
			}
		}
		
		public DomainObject ResolveToOneRelation(Key id, String fieldName)
		{
			SqlDataReader reader = null;
			SqlConnection connection = UnitOfWork.Instance.Connection;
			
			connection.Open();

			try
			{
				String selectStmt = "SELECT * FROM Region WHERE " + fieldName + " = @FK";
				SqlCommand command = new SqlCommand(selectStmt, connection);
				command.Parameters.Add("@FK", id[0]);
				
				reader = command.ExecuteReader();
				Region region = null;
				
				if(reader.Read())
				{
					region = loadFields(reader);
				}
				if(reader != null)
				{
					reader.Close();
				}
				connection.Close();
				
				return region;
			}
			catch(SqlException sqle)
			{
				throw new ApplicationException(sqle.Message);
			}
			catch(Exception e)
			{
				throw new ApplicationException(e.Message);
			}
			finally
			{
				connection.Close();
			}
		}
		
		public IList ResolveToManyRelation(Key id, String fieldName)
		{
			SqlDataReader reader = null;
			ArrayList array = new ArrayList();
			SqlConnection connection = UnitOfWork.Instance.Connection;
			SqlCommand command;
			connection.Open();
			
			try
			{
				command = new SqlCommand(
					"SELECT RegionID, VersionId FROM Region WHERE " + fieldName + " = @FK", connection);
					
				command.Parameters.Add("@FK", id[0]);
				
				reader = command.ExecuteReader();
				ArrayList keys = new ArrayList();
				Timestamp timestamp;
				while(reader.Read())
				{ 
					object regionid = safeGetValue(reader, "RegionID");
					
					timestamp = safeGetTimestamp(reader);
					
					Key currentKey = new Key(new object[]{regionid});
					DomainObject domobj = UnitOfWork.Instance.IdentityMap.getDomainObjectIfLoaded(
						typeof(Region), currentKey);
					
					if(domobj == null)
					{
						keys.Add(currentKey);
					}
					else if(!domobj.Timestamp.Equals(timestamp))
					{
						UnitOfWork.Instance.IdentityMap.unregisterDomainObject(domobj);
						keys.Add(currentKey);
					}
					else
					{
						array.Add(domobj);
					}
				}
				reader.Close();

				if(keys.Count > 0)
				{
					int primKeysCount = 1;
					ArrayList primKeys = new ArrayList();
					primKeys.Add("RegionID");
					StringBuilder selectAdStmt = new StringBuilder();
					selectAdStmt.Append("SELECT * FROM ");
					selectAdStmt.Append("Region");
					selectAdStmt.Append(" WHERE ");
					StringBuilder whereStmt;
					String[] andStmts = new String[keys.Count];
					for(int i = 0; i < keys.Count; i++)
					{
						String[] primKeyCriterias = new String[primKeysCount];
						for(int j = 0; j < primKeysCount; j++)
						{
							primKeyCriterias[j] = primKeys[j] + " = @key" + i +j;
						}
						whereStmt = new StringBuilder();
						whereStmt.Append("(");
						whereStmt.Append(String.Join(" AND ", primKeyCriterias));
						whereStmt.Append(")");
						andStmts[i] = whereStmt.ToString();
					}
					selectAdStmt.Append(String.Join(" OR ", andStmts));
					
					command = new SqlCommand(
						selectAdStmt.ToString(), connection);
					for(int i = 0; i < keys.Count; i++)
					{
						for(int j = 0; j < primKeysCount; j++)
						{
							String keyParam = "@key" + i + j;
							command.Parameters.Add(keyParam, ((Key)keys[i])[j]);
						}
					}
					
					reader = command.ExecuteReader();
					
					while(reader.Read())
					{
						Region region = loadFields(reader);
						array.Add(region);
					}
					reader.Close();
				} 
			}
			catch(SqlException sqle)
			{
				throw new ApplicationException(sqle.Message);
			}
			catch(Exception e)
			{
				throw new ApplicationException(e.Message);
			}
			finally
			{
				connection.Close();
			}
			return array;
		}
#endregion		

#region Helper Methods
		public Region loadFields(SqlDataReader reader)
		{
			Timestamp m_timestamp = safeGetTimestamp(reader);
			Key m_key = new Key(new object[]{
				safeGetValue(reader, "RegionID")
			});

			object m_Description = safeGetString(reader, "RegionDescription");
		
			Region region = 
				(Region)UnitOfWork.Instance.IdentityMap.getDomainObjectIfLoaded(typeof(Region), m_key);
			
			if(region == null)
			{
				region = 
					(Region)Registry.Instance.getFactory(typeof(Region)).createFromParameters(
						m_key,
						m_timestamp,
						new DictionaryEntry("Description", m_Description),
						new DictionaryEntry("Territories", new ToManyRelation(typeof(Territory), "RegionID", m_key, false)));
				
				UnitOfWork.Instance.IdentityMap.registerDomainObject(region);
			}
			return region;
		}

		protected Timestamp safeGetTimestamp(SqlDataReader reader)
		{
			byte[] m_buffer = new byte[8];
			reader.GetBytes(reader.GetOrdinal("VersionId"), 0, m_buffer, 0, 8);
			return new Timestamp(m_buffer);
		}
		
		protected object safeGetString(SqlDataReader reader, string columnName)
		{
			int ordinal = reader.GetOrdinal(columnName);
			return reader.IsDBNull(ordinal) ? null : reader.GetString(ordinal).Trim();
		}
		
		protected object safeGetDouble(SqlDataReader reader, string columnName)
		{
			int ordinal = reader.GetOrdinal(columnName);
			return reader.IsDBNull(ordinal) ? null : (object)reader.GetDouble(ordinal);
		}
		
		protected object safeGetInt32(SqlDataReader reader, string columnName)
		{
			int ordinal = reader.GetOrdinal(columnName);
			return reader.IsDBNull(ordinal) ? null : (object)reader.GetInt32(ordinal);
		}
		
		protected object safeGetDateTime(SqlDataReader reader, string columnName)
		{
			int ordinal = reader.GetOrdinal(columnName);
			return reader.IsDBNull(ordinal) ? null : (object)reader.GetDateTime(ordinal);
		}

		protected object safeGetValue(SqlDataReader reader, string columnName)
		{
			int ordinal = reader.GetOrdinal(columnName);
			return reader.IsDBNull(ordinal) ? null : (object)reader.GetValue(ordinal);
		}
#endregion

	}
}
