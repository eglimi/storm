//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.2.7.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Reflection;
using Storm.Lib;
using Storm.Attributes;
using NorthWind;

namespace NorthWind
{

	[DomainObjectImpl]
	public class RegionImpl : Region
	{
#region Factory Implementation
			public class FactoryImpl : IFactory
			{
			
			public DomainObject create()
			{
				return new RegionImpl();
			}
			
			public DomainObject createFromParameters(
				Key id,
				Timestamp timestamp,
				params DictionaryEntry[] parameters)
			{
				return new RegionImpl(id, timestamp, parameters);
			}
		}
#endregion

#region Finder Implementation
		public class FinderImpl : IFinder
		{
			public DomainObject findById(Key id)
			{
				return Registry.Instance.getMapper(typeof(Region)).findById(id);
			}
			public IList find(QueryObject qo)
			{
				return Registry.Instance.getMapper(typeof(Region)).find(qo);
			}
			public IList findAll()
			{
				return Registry.Instance.getMapper(typeof(Region)).findAll();
			}
		}
#endregion

#region Static Attributes
		private static FactoryImpl m_FactoryImpl = new FactoryImpl();
		private static FinderImpl m_FinderImpl = new FinderImpl();
#endregion
		
#region Member Variables
		private object m_Description = null;
		private ToManyRelation m_Territories = null;
#endregion

#region Constructors
		public RegionImpl()
		{
			markNew();
		}
		

		internal RegionImpl(
			Key id, 
			Timestamp timestamp, 
			params DictionaryEntry[] parameters)
		{ 
			markClean();
			m_id = id;
			m_timestamp = timestamp;
			FieldInfo fInfo;
			Type thisType = this.GetType();
			Type domainObjectType = typeof(Region);
			
			IEnumerator enumerator = parameters.GetEnumerator();

			while(enumerator.MoveNext())
			{
				if(((DictionaryEntry)enumerator.Current).Value != null)
				{
					if(((DictionaryEntry)enumerator.Current).Value.GetType() == typeof(ToOneRelation))
					{ 
					} 
					if(((DictionaryEntry)enumerator.Current).Value.GetType() == typeof(ToManyRelation))
					{ 
						if((String)((DictionaryEntry)enumerator.Current).Key == "Territories")
						{ 
							m_Territories = (ToManyRelation)((DictionaryEntry)enumerator.Current).Value;
							continue;
						}
					}
				} 
				if(this.GetType().GetProperty((String)((DictionaryEntry)enumerator.Current).Key) != null)
				{
					string variable = "m_" + (String)((DictionaryEntry)enumerator.Current).Key;
					if((fInfo = thisType.GetField(variable, BindingFlags.DeclaredOnly|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance)) != null)
					{
							fInfo.SetValue(this, ((DictionaryEntry)enumerator.Current).Value);
					}
				}
			}
		}
#endregion

#region Methods
		public override void addTerritory(Territory t)
		{
			if(t != null)
			{
				t.Region = this;
				m_Territories.Add(t);
				this.markDirty();
			}
			else
			{
				throw new ApplicationException();
			}
		}
		
		public override void delete()
		{
			foreach(Territory territory in Territories)
			{
				territory.delete();
			}
			
			this.markRemoved();
		}
#endregion

#region Properties
		public override Int32 RegionId 
		{
			get
			{
				if(m_id == null)
					return 0;			
				return (Int32)m_id[0];
			}
		}
		public override String Description 
		{
			get
			{
				if(m_Description == null)
					return String.Empty;			
				return (String)m_Description;
			}
		}
		public override IList Territories 
		{
			get
			{
				return (IList)m_Territories;
			}
		}
				
		public static FactoryImpl Factory
		{
			get
			{
				return m_FactoryImpl;
			}
		}
		
		public static FinderImpl Finder
		{
			get
			{
				return m_FinderImpl;
			}
		}
		
		public override bool isNull(string propertyName)
		{
			switch(propertyName)
			{
				case "Description":
					if(m_Description == null) return true;
					break;
				default:
					break;
			}
			return false;
		}
#endregion
	}

}
