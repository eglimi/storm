//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith.
//     Version: 2.2.7.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Reflection;
using Storm.Lib;
using Storm.Attributes;
using HsrOrderApp.BusinessLayer.DomainModel;

namespace HsrOrderApp.BusinessLayer.DomainModelImpl
{

	[DomainObjectImpl]
	public class OrderDetailImpl : OrderDetail
	{
#region Factory Implementation
		public class FactoryImpl : OrderDetailFactory, IFactory
		{ 
			public override OrderDetail createOrderDetail(Order order, Product product, Double unitPrice, Int32 quantity)
			{
				return new OrderDetailImpl(order, product, unitPrice, quantity);
			}
			
			public DomainObject create()
			{
				return new OrderDetailImpl();
			}
			
			public DomainObject createFromParameters(
				Key id,
				Timestamp timestamp,
				params DictionaryEntry[] parameters)
			{
				return new OrderDetailImpl(id, timestamp, parameters);
			}
		}
#endregion

#region Finder Implementation
		public class FinderImpl : OrderDetailsFinder, IFinder
		{
			public DomainObject findById(Key id)
			{
				return Registry.Instance.getMapper(typeof(OrderDetail)).findById(id);
			}
			public IList find(QueryObject qo)
			{
				return Registry.Instance.getMapper(typeof(OrderDetail)).find(qo);
			}
			public IList findAll()
			{
				return Registry.Instance.getMapper(typeof(OrderDetail)).findAll();
			}
		}
#endregion

#region Static Attributes
		private static FactoryImpl m_FactoryImpl = new FactoryImpl();
		private static FinderImpl m_FinderImpl = new FinderImpl();
#endregion
		
#region Member Variables
		private ToOneRelation m_Order = null;
		private ToOneRelation m_Product = null;
		private object m_UnitPrice = null;
		private object m_Quantity = null;
#endregion

#region Constructors
		public OrderDetailImpl()
		{
		}
		
		public OrderDetailImpl(Order order, Product product, Double unitPrice, Int32 quantity)
		{
			markNew();
			m_Order = new ToOneRelation(typeof(Order), "OrderID", null);
			m_Product = new ToOneRelation(typeof(Product), "ProductID", null);
			m_Product.Object = product;
			m_UnitPrice = unitPrice;
			m_Quantity = quantity;
			m_Order.Object = order;
		}

		internal OrderDetailImpl(
			Key id, 
			Timestamp timestamp, 
			params DictionaryEntry[] parameters)
		{ 
			markClean();
			m_id = id;
			m_timestamp = timestamp;
			FieldInfo fInfo;
			Type thisType = this.GetType();
			Type domainObjectType = typeof(OrderDetail);
			
			IEnumerator enumerator = parameters.GetEnumerator();

			while(enumerator.MoveNext())
			{
				if(((DictionaryEntry)enumerator.Current).Value != null)
				{
					if(((DictionaryEntry)enumerator.Current).Value.GetType() == typeof(ToOneRelation))
					{ 
						if((String)((DictionaryEntry)enumerator.Current).Key == "Order")
						{ 
							m_Order = (ToOneRelation)((DictionaryEntry)enumerator.Current).Value;
							continue;
						}
						if((String)((DictionaryEntry)enumerator.Current).Key == "Product")
						{ 
							m_Product = (ToOneRelation)((DictionaryEntry)enumerator.Current).Value;
							continue;
						}
					} 
					if(((DictionaryEntry)enumerator.Current).Value.GetType() == typeof(ToManyRelation))
					{ 
					}
				} 
				if(this.GetType().GetProperty((String)((DictionaryEntry)enumerator.Current).Key) != null)
				{
					string variable = "m_" + (String)((DictionaryEntry)enumerator.Current).Key;
					if((fInfo = thisType.GetField(variable, BindingFlags.DeclaredOnly|BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance)) != null)
					{
							fInfo.SetValue(this, ((DictionaryEntry)enumerator.Current).Value);
					}
				}
			}
		}
#endregion

#region Methods
		
		public override void delete()
		{
			
			this.markRemoved();
		}
#endregion

#region Properties
		public override Order Order 
		{
			get
			{
				return (Order)m_Order.Object;
			}
			set
			{
				m_Order.Object = value;
			}
		}
		public override Product Product 
		{
			get
			{
				return (Product)m_Product.Object;
			}
			set
			{
				m_Product.Object = value;
			}
		}
		public override Double UnitPrice 
		{
			get
			{
				if(m_UnitPrice == null)
					return 0.0;			
				return (Double)m_UnitPrice;
			}
			set
			{
				m_UnitPrice = value;
				markDirty();
			}
		}
		public override Int32 Quantity 
		{
			get
			{
				if(m_Quantity == null)
					return 0;			
				return (Int32)m_Quantity;
			}
			set
			{
				m_Quantity = value;
				markDirty();
			}
		}
				
		public static FactoryImpl Factory
		{
			get
			{
				return m_FactoryImpl;
			}
		}
		
		public static FinderImpl Finder
		{
			get
			{
				return m_FinderImpl;
			}
		}
		
		public override bool isNull(string propertyName)
		{
			switch(propertyName)
			{
				case "Order":
					if(m_Order.Object == null) return true;
					break;
				case "Product":
					if(m_Product.Object == null) return true;
					break;
				case "UnitPrice":
					if(m_UnitPrice == null) return true;
					break;
				case "Quantity":
					if(m_Quantity == null) return true;
					break;
				default:
					break;
			}
			return false;
		}
#endregion
	}

}
